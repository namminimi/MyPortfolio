<div>프론트엔드 교육 중 처음 진행한 팀 프로젝트이고 javascript로 야구게임을 개발했습니다.</div><div>팀명을 입력하고 enter키를 누르면 게임 시작합니다.</div><div>룰은 실제 야구와 비슷하며 공격과 수비로 나누어집니다</div><div>상대팀은 컴퓨터이고 유저는 공격과 수비 역할에 따라 기술 버튼이 바뀝니다</div><div>공격에는 swing, skill(진심스윙), watch가 있고 수비에는 pitch, skill(fire Pitch) 기술 버튼이 있습니다</div><div>각 상황에 따라 우측 하단에 상황 로그가 뜨며 좌측 상단에는 스트라이크, 볼, 아웃에 대해 빈 원에 색이 활성화가 되고 중간에는 각 팀 점수와 이름이 표시됩니다. 우측 상단에는 몇 회차인지, 공격과 수비의 상황(스트라이크, 볼, 아웃)을 표시해줍니다.</div><div>공격수가 공을 쳤을 시 1루, 2루, 3루에 선수가 표시됩니다.</div><div>홈런 쳤을 경우 1루, 2루, 3루의 선수들이 홈으로 들어오면서 점수를 획득합니다.</div><div>공격수 팀이 쓰리 아웃 될 시 공수 교대가 진행됩니다.</div><div>현재 제한된 회차는 3회차이며 3회차가 끝날 시 게임은 종료되고 각 팀 점수가 게임 종료 메세지와 함께 표시됩니다.</div>

<div>이번 프로젝트에서 객체 사용과 각 엘리먼트에 대한 이벤트 적용 방법을 처음 시도해봤습니다. 초기에는 어려움을 겪었지만, 팀원과의 협업을 통해 점차 익숙해질 수 있었습니다.</div><div>특히, 프로젝트를 진행하며 각 상황에 맞는 조건을 설정하는 데 많은 시간을 할애했습니다. 공격과 수비 상황에 따른 로직을 팀원과 함께 세밀하게 분석하고 정리하면서, 점진적으로 문제를 해결해나갈 수 있었습니다. 아쉬운 점은 중복된 코드가 많아 코드의 길이가 상당히 길어진 점이 아쉬웠습니다.</div>

<h3 className='p_function_title'>시작화면</h3><div>팀명 입력란 표시 구현</div><div>상대팀 컴퓨터 기능 구현</div><div>전광판 스트라이크, 볼, 아웃 구현</div><div>턴마다 회차, 공격인지 수비인지 표시 구현</div><div>입력한 팀명 표시 구현</div><div>홈으로 캐릭터 들어왔을 시 점수 구현</div><h3 lassName='p_function_title'>공격</h3><div>스윙, 지켜보기, 스킬 버튼 표시 구현</div><h3 lassName='p_function_title'>수비</h3><div>던지기, 스킬 버튼 표시 구현</div><div>판단 로그창 구현</div><div>각 버튼 성공 여부에 따라 스트라이크, 볼 구현 구현</div><div>1루, 2루, 3루 구현</div><div>안타, 홈런 성공 여부에 따라 캐릭터 이동 구현</div><div>공격/수비 교대 구현</div><div>승패 여부에 따라 사용자 결과 표시 구현</div>

<div>javascript에 내장되어있는 canvas API 사용하여 구현하였습니다.</div><div>엔터키를 누르면 시작됩니다.</div><div>커비를 조작하여 각 차선을 지나가는 자동차를 피해서 건너편 보도로 넘어가는 게임입니다.</div><div>총 목숨은 3개고 자동차에 부딪히지 않고 건너편 도로로 넘어가게 되면 score 1점!!</div><div>자동차에 부딪히면 다시 처음 위치로 돌아가고 목숨이 -1 감소됩니다. 목숨이 0이 되면 게임은 끝납니다.</div>

<h3 className='p_function_title'>프로젝트에서 자동차와 캐릭터 구현 중</h3><div>강사님의 조언을 구하고 구글링에 필요한 정보를 얻어 해결 방안을 모색했습니다.</div><div>keyboard 이벤트를 활용해 캐릭터를 움직이게 하고, 자동차가 랜덤하게 위아래로 움직이는 기능을 성공적으로 구현했습니다. 이 과정에서 큰 만족감을 느꼈습다. 하지만, 자동차가 랜덤으로 나오는 과정에서 가끔 자동차가 겹쳐 나오는 문제가 발생했고, 이 문제는 프로젝트 기간 내에 해결하지 못했습니다.</div><div>후에 생각해봤을 때 이 문제가 배열 안에 자동차 값이 중복으로 발생하여 나타나는 버그라는 것을 파악했습니다.</div>

<h3 className='p_function_title'>시작화면</h3><div>Enter 누를 시 게임 시작 기능 구현</div><h3 className='p_function_title'>방향키</h3><div>a, w, d, s 누를 시 캐릭터 위, 아래, 좌, 우 방향 이동 구현</div><div>위 아래 4차선 도로에 자동차 랜덤으로 출력 구현</div><div>총 목숨 3개 화면에 표시 구현</div><div>캐릭터와 자동차 충돌 시 원래 자리로 이동, 목숨 -1 기능 구현</div><div>캐릭터 도착지에 도착 시 원래 자리로 이동, 점수 +1 화면에 표시 기능 구현</div><div>점수를 얻거나 목숨을 잃을 시 메세지 표시 구현</div><div>목숨 0일 시 게임 종료 기능 구현</div><div>게임 끝날 시 Enter 누르면 재시작 기능 구현</div>

커머스 주제를 선택했고 디자인은 별도의 도구 사용 없이 그림으로 대략적인 와이어프레임을 설계해서 의류 판매 웹사이트를 개발하였습니다.

<h3 className='p_function_title'>프로젝트 진행 중</h3><div>팀원들과의 커뮤니케이션과 데이터베이스 연동 및 쿼리문 작성, PHP에 대한 이해도 부족 특히 두 개의 데이터베이스 테이블을 연결하는 작업은 복잡성을 더해 많은 어려움을 겪었습니다.</div><div>이러한 문제를 해결하기 위해, 우리 팀은 구글링과 강사님을 통해 필요한 정보를 적극적으로 찾아보면서 문제를 하나씩 해결해나갔습니다.</div><div>

<div>회원가입 & 로그인 기능 구현</div><div>장바구니 기능 구현</div><div>상품등록 기능 구현</div><div>상품 목록 페이지</div><div>상품 상세보기 페이지</div><div>리뷰 등록 기능 구현</div><div>DB 관리</div>

유저들이 서로 소통하며, 다양한 영화의 줄거리와 예고편을 탐색할 수 있고 매달 추천 영화를 제공하며, 최신 영화 정보를 손쉽게 접할 수 있고 유저들은 자신의 평가를 공유하며 영화에 대한 다양한 의견을 나눌 수 있는 프로젝트입니다.

<h3 className='p_function_title'>로그인&회원가입 기능 구현 중</h3><div>프로젝트는 React와 Node.js를 활용하여 진행되었으며, 디자인 과정에서는 별도의 도구를 사용하지 않고 그림으로 와이어프레임을 설계했습니다. 로그인 기능 구현을 담당하면서, 서버에 요청을 보낼 때 데이터베이스 필드 구조와 일치하지 않는 문제에 직면했습니다. 이 문제를 해결하기 위해, 콘솔 로깅을 통해 지속적으로 문제를 추적하고, 데이터 구조를 세밀하게 분석하여 서버 요청이 데이터베이스 필드 구조와 일치하도록 조정했습니다.</div><h3 className='p_function_title'>페이지네이션 구현중</h3><div>페이지네이션 구현 과정에서는 처음에 구현 방법에 대한 고민이 있었습니다. 구글링을 통해 여러 방법을 탐색한 결과,  모든 데이터를 요청해서 각 페이지에 들어갈 데이터를 slice 메서드를 사용하여 페이지 마지막 수 와 첫 번째 수 값이 계산된 데이터를 처리해주었고 각 페이지 당 렌더링 되는 데이터 수, 전체 페이지 수, 페이지 업데이트 함수를 페이지네이션 컴포넌트에  props로 전달하여 구현하였습니다.</div>

<div>로그인 & 회원가입 페이지</div><div>장르별 영화 페이지</div><div>검색 페이지</div><div>공지사항(쓰기,수정,삭제,페이지네이션)</div><div>자유게시판(쓰기,수정,삭제,페이지네이션)</div>

이 프로젝트는 다양한 아이스크림 할인점에서 영감을 받아 시작된 프로젝트이고 이 사이트를 통해, 유저들이 국내에서 판매하는 다양한 아이스크림을 쉽고 편리하게 탐색하고 구매할 수 있도록 제작하게 됐습니다.

<h3 className='p_function_title'>장바구니 기능 구현 중</h3><div>전체 선택 및 개별 선택 기능 그리고 합계 금액 표시의 오류 문제였고 이 문제를 해결하기 위해 우선 구글링을 하였고 문제의 원인은 함수 사용 방법에 오류가 있었음을 알게 되었습니다. 이를 바탕으로, 구글링을 통해 찾은 사이트의 정보를 참고하여 기존의 구현 방식을 수정했습니다. 해결 방안으로는 전체 선택 기능과 개별 선택 기능을 명확히 구분하는 데 초점을 맞추고, 두 가지 기능을 위한 함수를 각각 따로 작성하는 방법으로 해결했습니다.</div>

<div>로그인 & 회원가입 페이지</div><div>마이페이지</div><div>메인페이지</div><div>검색</div><div>상품 등록</div><div>상품 리스트 페이지</div><div>상품 상세보기 페이지</div><div>장바구니 페이지</div><div>공지사항 페이지</div><div>DB관리</div><div>각 api 구현</div>

<h3 className='p_function_title'>페이지네이션 커스텀 구현 중에 중간 생략 조건문제</h3><div>페이지네이션 기능을 커스텀 구현하면서 중간 페이지 번호를 생략하는 로직에 대한 조건 설정에 어려움을 겪었습니다. 이 문제를 해결하기 위해 구체적으로, 페이지네이션의 다양한 시나리오를 세 가지 주요 상황으로 분류했습니다.</div><div>1. 첫 번째 렌더링 시 발생하는 상황</div><div>2. 특정 페이지 번호를 클릭했을 때 발생하는 상황</div><div>3. 마지막 페이지 번호에 도달하기 직전의 상황</div><div>정리한 조건들을 실제 코드에 적용해보니, 중간 페이지 번호의 생략 로직이 원하는 대로 해결되었습니다.</div><h3 className='p_function_title'>반응형에 따라 데이터 수 변경 구현 중</h3><div>pc에서는 8개 tablet에서는 6개로 변경되면서 페이지 수도 같이 늘어나게 되는데 tablet에서 pc 페이지 수보다 이상인 번호를 누르고 다시 pc 화면으로 사이트를 늘리면 pc페이지 수보다 이상인 페이지이기 때문에 화면에 랜더링 되는 데이터가 없습니다. 그래서 이를 해결하기 위해서 tablet에서 pc로 변경될 시 현재 페이지를 pc 페이지의 마지막 페이지로 업데이트 해주는 방법으로 해결했습니다.</div>

질문 목록 페이지(전체) & 반응형

<h3 className='p_function_title'>이중 모달 문제 </h3><div>프로젝트 중 모달을 React Portals와 합성 컴포넌트를 사용하여 구현하면서, 단일 모달은 잘 작동했으나, 모달을 중첩하여 두 개 이상 띄우려고 할 때 이전 모달이 제대로 제거되지 않는 버그에 직면했습니다. 이 문제를 해결하기 위해 여러 방법을 시도했고, 구글링 및 멘토님의 조언도 구했지만, 문제는 계속되었습니다.</div><div>문제를 해결하기 위해 계속해서 콘솔을 통해 디버깅을 진행한 결과, 중첩된 모달들이 페이지에서 제대로 인식되지 않는 것을 발견했습니다. 완벽한 해결책은 아니지만, 문제를 우회하기 위해 context로 전달받고 있는 모달 닫는함수와 여는 함수를 전역으로 변경하고 중첩 모달을 띄우는 각각의 버튼을 z-index를 사용하여 최하단으로 배치해서 해결했습니다.</div>

<div>회원가입 & 로그인 페이지 & 반응형</div><div>(이번 프로젝트에서는 로그인&회원가입 구현할 때 react-hook-form 라이브러리와 내장되어있는 control을 사용하여 최대한 react-hook-form의 기능만 사용해서 구현하였다.)</div><div>공통 컴포넌트(dropdown&검색 기능, 이미지 추가)</div><div>컬럼 관리(모달)</div><div>할 일 카드 상세보기(모달)</div>

<div>캠핑에 익숙하지 않은 초보 캠퍼들을 위한 취향 저격 맞춤 캠핑장을 추천할 수 있는 웹서비스입니다.</div>
<div>취향을 테스트한 결과를 토대로 맞춤 캠핑장을 필터링 할 수 있습니다.</div>
<div>캠핑장 사장님들은 업장을 등록하고 캠핑장 객실을 등록할 수 있습니다.</div>
<div>캠핑장에 대한 키워드 리뷰로 어떤 캠핑장인지 쉽게 파악할 수 있습니다.</div>
<div>원하는 캠핑장을 지도에서 검색하고 객실을 예약할 수 있습니다.</div>

<h3 className='p_function_title'>상세페이지에서 이미지 로드가 느린 현상</h3><div>여러 방법을 시도해보았고 그 중에 lighthouse 를 사용해 검토해보았을 때 setSrc 설정해서 반응 사이즈를 줄이는 방법과 이미지가 여러개이고 5개만 보여주는 부분이였는데 slice 메서드와 map메서드를 같이 사용해서 구현한 부분을 map메서드를 사용해서 비슷한 조건만 줘서 수정했더니 30초 줄었습니다. 하지만 이미지 고유 크기가 1200px이 넘거나 크기가 mb인 대용량 이미지는 해결하지 못하였고 이 부분에 대해서는 팀원들과 여러 자료를 찾아보면 해결해보고 있습니다.</div><h3 className='p_function_title'>react-swiper 라이브러리 사용으로 같은 라인에 있는 dropdown요소들이 onBlur이벤트를 인식 못하는 현상</h3><div>Swiper의 **`translateZ`** 속성 사용으로 인해 여러 층이 형성되는 것을 발견하였고 이로 인해 동일한 층에 있는 요소들만 onBlur가 반응하는 문제가 발생했습니다. 성능에 대한 확신은 없지만, 문제 해결을 위해 **`document.addEventListener`**를 사용해 전체 영역에 **`click`** 이벤트를 추가하고, 드롭다운 영역만을 구별하여 특정 동작을 하도록 설정함으로써 문제를 해결했습니다.</div>

<div>공통컴포넌트(button, header)</div><div>온보딩페이지(공통)</div><div>지도페이지(공통) & 상세필터 & 반응형</div><div>캠핑장 상세페이지 퍼블리싱 & 반응형 & 지도 & 지도 모달</div><div>예약페이지 퍼블리싱 & 반응형</div><div>마이페이지(전체) & 내역 상세 페이지 & 후기등록 모달</div>